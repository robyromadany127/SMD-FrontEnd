name: Auto Deploy Frontend (Zero Downtime)

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: dev

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 23

    - name: Install dependencies
      run: npm install

    - name: Build React app
      run: npm run build

    - name: Debug build output
      run: ls -lah dist

    - name: Set deployment timestamp
      id: set_timestamp
      run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Upload build to VPS (Blue-Green Deployment)
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          
          # Buat direktori releases jika belum ada
          sudo mkdir -p /var/www/frontend/releases

          # Buat direktori baru berdasarkan timestamp
          NEW_RELEASE="/var/www/frontend/releases/${{ env.TIMESTAMP }}"
          sudo mkdir -p $NEW_RELEASE

          echo "Uploading new build to $NEW_RELEASE..."

          exit 0  # Keluar agar SCP Action berjalan lebih dulu

    - name: SCP Upload to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "dist/*"
        target: "/var/www/frontend/releases/${{ env.TIMESTAMP }}"

    - name: Create .env file on VPS
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          
          NEW_RELEASE="/var/www/frontend/releases/${{ env.TIMESTAMP }}"
          
          echo "Writing .env file in $NEW_RELEASE..."
          echo "${{ secrets.ENV_FILE }}" | sudo tee $NEW_RELEASE/.env > /dev/null

    - name: Update Nginx Configuration
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e

          echo "Updating Nginx configuration..."

          sudo tee /etc/nginx/sites-available/frontend > /dev/null <<EOF
          server {
              listen 80;
              server_name dev.smd.nyv.my.id www.dev.smd.nyv.my.id;

              root /var/www/frontend/current;
              index index.html;
              location / {
                  try_files \$uri /index.html;
              }

              error_page 404 /index.html;

              access_log /var/log/nginx/frontend_access.log;
              error_log /var/log/nginx/frontend_error.log;
          }
          EOF

          sudo ln -sf /etc/nginx/sites-available/frontend /etc/nginx/sites-enabled/frontend
          
          sudo nginx -t && sudo systemctl reload nginx

    - name: Switch Symlink to New Release
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e

          NEW_RELEASE="/var/www/frontend/releases/${{ env.TIMESTAMP }}"
          
          if [ ! -d "$NEW_RELEASE" ]; then
            echo "Error: New release directory not found!"
            exit 1
          fi

          echo "Switching symlink to $NEW_RELEASE..."
          sudo ln -sfn $NEW_RELEASE /var/www/frontend/current
          
          # Reload Nginx tanpa downtime
          sudo systemctl reload nginx

          # Hapus rilis lama, hanya simpan 3 versi terbaru
          ls -td /var/www/frontend/releases/* | tail -n +4 | xargs sudo rm -rf

          # Bersihkan cache Nginx
          sudo systemctl restart nginx
